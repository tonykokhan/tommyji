# 参数的传递：
# 函数的参数传递本质上就是：从实参到形参的赋值操作。Python中“一切皆对象”，所有的赋值操作都是“引用的赋值”。
# 所以，Python中参数的传递都是“引用传递”，不是“值传递”。

# 具体操作时分为两类：
# 1. 对“可变对象”进行“写操作”，直接作用于原对象本身；
# 2. 对“不可变对象”进行“写操作”，会产生一个新的“对象空间”，并用新的值填充这块空间。（起到其他语言的“值传递”
# 效果，但不是“值传递”）

# 可变对象有：
# 字典、列表、集合、自定义的对象等
# 不可变对象有：
# 数字、字符串、元组、function等


# 参数传递：传递可变对象的引用
b = [10, 20]


def f2(m):
    print("m:", id(m))  # b和m是同一个对象
    m.append(30)        # 由于m是可变对象，不创建对象拷贝，直接修改这个对象


f2(b)
print("b:", id(b))
print(b)


# 传递不可变对象的引用：
# 传递参数是不可变对象（例如：int、float、字符串、元组、布尔值），实际传递的还是对象的引用。在“赋值操作”时，
# 由于不可变对象无法修改，系统会新创建一个对象。

# 参数传递：传递不可变对象的引用
a = 100


def f1(n):
    print("n:", id(n))  # 传递进来的是a对象的地址
    n = n + 200         # 由于a是不可变对象，因此创建新的对象n
    print("n:", id(n))  # n已经变成了新的对象
    print(n)


f1(a)
print("a:", id(a))

# 显然，通过id值我们可以看到n和a一开始是同一个对象。给n赋值后，n是新的对象。
