这种方式，有两个坏处：
1. 逻辑代码和错误处理代码放一起！
2. 程序员本身需要考虑的例外情况较复杂，对程序员本身要求较高！
那么，我们如何解决应对异常情况呢？python的异常机制给我们提供了方便的处理方式。
如上情况，如果是用python的异常机制来处理，示意代码如下（仅限示意，不能运行）：

# 将d:/a.txt拷贝到e:盘
try:
    copyFile("d:/a.txt", "e:/a.txt")
except:
    print("文件无法拷贝")


异常机制本质
异常指程序运行过程中出现的非正常现象，例如用户输入错误、除数为零、需要处理的文件不存在、数组下标越界等。
所谓异常处理，就是指程序在出现问题时依然可以正确的执行剩余的程序，而不会因为异常而终止程序执行。

python中，引入了很多来描述和处理异常的类，称为异常类。异常类定义中包含了该类异常的信息和对异常进行处理的方法。

下面较为完整的展示了python中内建异常类的继承层次：

BaseException   所有异常的父类
  |--KeyBoardInterrupt
  |--SystemExit
  |--GeneratorExit
  |--Exception
      |--NameError
      |--ValueError
      |--AttributeError等等

我们处理一下，遇到的第一个异常：
# 测试简单的0不能做除数异常
a = 3/0


python中一切都是对象，异常也采用对象的方式来处理。处理过程：
1. 抛出异常：在执行一个方法时，如果发生异常，则这个方法生成代表该异常的一个对象，停止当前执行路径，并把异常对象提交给解释器。
2. 捕获异常：解释器得到该异常后，寻找相应的代码来处理该异常。


解决异常问题的态度
学习完异常相关知识点，只是开始对异常有些认识，不意味着你会调试任何异常；调试异常，需要大量的经验作为基础。因此，大家不要在此
停留，继续往后学习。碰到每个异常，都要花心思去解决而不要动不动张口问人。通过自己的努力无法解决，再去找老师同学帮助解决。

解决每一个遇到的异常，建议大家遵循如下三点：
1. 不慌张，细看信息，定位错误。看清楚报的错误信息，并定位发生错误的地方。
2. 百度并查看十个相关帖子。将异常类信息进行百度，至少查看十个以上的相关帖子。
3. 以上两步仍然无法解决，找老师和同学协助解决。

正常情况，自己遵循如上步骤解决30个以上的错误，就能积累初步的调试经验，以后遇到的大部分错误都能独立完成。

